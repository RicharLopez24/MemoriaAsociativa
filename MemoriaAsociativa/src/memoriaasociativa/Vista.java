/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memoriaasociativa;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author ricardo
 */
public class Vista extends javax.swing.JFrame {

    int filas = 7;
    int columnas = 25;
    
    JButton[][] lbs1 = new JButton[filas][columnas];
    JButton[][] lbs2 = new JButton[filas][columnas];
    JButton[][] label = new JButton[filas][columnas];
    
    int colve = 5;
    int [][] mat1 = new int[filas][colve];
    int [][] mat2 = new int[filas][colve];
    int [][] mat3 = new int[filas][colve];
    int [][] mat4 = new int[filas][colve];
    int [][] mat5 = new int[filas][colve];
    
    int [][] patron1 = new int[filas][colve];
    int [][] patron2 = new int[filas][colve];
    int [][] patron3 = new int[filas][colve];
    int [][] patron4 = new int[filas][colve];
    int [][] patron5 = new int[filas][colve];
    
    int [][] vRecuperadoMax1;
    int [][] vRecuperadoMin1;
    int [][] vRecuperadoMax2;
    int [][] vRecuperadoMin2;
    int [][] vRecuperadoMax3;
    int [][] vRecuperadoMin3;
    int [][] vRecuperadoMax4;
    int [][] vRecuperadoMin4;
    int [][] vRecuperadoMax5;
    int [][] vRecuperadoMin5;
        
    int [] vect1;
    int [] vect2;
    int [] vect3;
    int [] vect4;
    int [] vect5;
    
    int [][] memoria1;
    int [][] memoria2;
    int [][] memoria3;
    int [][] memoria4;
    int [][] memoria5;
    
    int [][] matMaximos;
    int [][] matMinimos;
    
    int[] pRecuperado1;
    int[] pRecuperado2;
    int[] pRecuperado3;
    int[] pRecuperado4;
    int[] pRecuperado5;
    
    int[] auxmax1 = new int[filas*columnas];
    int[] auxmin1 = new int[filas*columnas];
    int[] auxmax2 = new int[filas*columnas];
    int[] auxmin2 = new int[filas*columnas];
    int[] auxmax3 = new int[filas*columnas];
    int[] auxmin3 = new int[filas*columnas];
    int[] auxmax4 = new int[filas*columnas];
    int[] auxmin4 = new int[filas*columnas];
    int[] auxmax5 = new int[filas*columnas];
    int[] auxmin5 = new int[filas*columnas];
    

    int [] p1;
    int [] p2;
    int [] p3;
    int [] p4;
    int [] p5;
    
    /**
     * Creates new form Vista
     */
    public Vista() {
        initComponents();
        
        setMatrices1();
        setMatrices2();
        setMatricesResul();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCalculo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jp1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jp2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jp3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnRecuperar = new javax.swing.JButton();
        btnaditivo = new javax.swing.JButton();
        btnsustrativo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCalculo.setText("calculo de memoria");
        btnCalculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculoActionPerformed(evt);
            }
        });

        jLabel3.setText("patrones originales ");

        jp1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jp1.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout jp1Layout = new javax.swing.GroupLayout(jp1);
        jp1.setLayout(jp1Layout);
        jp1Layout.setHorizontalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        jp1Layout.setVerticalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jp2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jp2.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout jp2Layout = new javax.swing.GroupLayout(jp2);
        jp2.setLayout(jp2Layout);
        jp2Layout.setHorizontalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        jp2Layout.setVerticalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );

        jLabel4.setText("patrones a recuperar");

        jp3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jp3.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout jp3Layout = new javax.swing.GroupLayout(jp3);
        jp3.setLayout(jp3Layout);
        jp3Layout.setHorizontalGroup(
            jp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        jp3Layout.setVerticalGroup(
            jp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );

        jLabel5.setText("resultado");

        jButton1.setText("limpiar botones");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnRecuperar.setText("recuperar patrones");
        btnRecuperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecuperarActionPerformed(evt);
            }
        });

        btnaditivo.setText("ruido aditivo");
        btnaditivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaditivoActionPerformed(evt);
            }
        });

        btnsustrativo.setText("ruido sustrativo");
        btnsustrativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsustrativoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jp2, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRecuperar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnaditivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnsustrativo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jp3, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jp1, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCalculo)))
                        .addContainerGap(13, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jp1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(btnCalculo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jp2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRecuperar)
                        .addGap(38, 38, 38)
                        .addComponent(btnaditivo)
                        .addGap(16, 16, 16)
                        .addComponent(btnsustrativo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jp3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculoActionPerformed
        // TODO add your handling code here:

        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < 5; j++) {                  
                if(j < 5){
                    if(lbs1[i][j].getName().equals("0")){
                        mat1[i][j] = 0;
                    }else{
                        mat1[i][j] = 1;
                    }
                  
                }
                if((j+5) >= 5 && (j+5) < 10){

                    if(lbs1[i][j+5].getName().equals("0")){
                        mat2[i][j] = 0;
                    }else{
                        mat2[i][j] = 1;
                    }
                  
                }
                if((j+10) >= 10 && (j+10) < 15){

                    if(lbs1[i][j+10].getName().equals("0")){
                        mat3[i][j] = 0;
                    }else{
                        mat3[i][j] = 1;
                    }
                  
                }
                if((j+15) >= 15 && (j+15) < 20){

                    if(lbs1[i][j+15].getName().equals("0")){
                        mat4[i][j] = 0;
                    }else{
                        mat4[i][j] = 1;
                    }
                  
                }
                if((j+20) >= 20 && (j+20) < 25){

                    if(lbs1[i][j+20].getName().equals("0")){
                        mat5[i][j] = 0;
                    }else{
                        mat5[i][j] = 1;
                    }
                  
                }
                
            }
            //System.out.println();
        }
        
        //lenado de vectores para calcular las memorias
        int cont=0 ,vecval= filas*colve;
        vect1 = llenarVector(mat1, filas, colve, cont, vecval);
        imprimirVector(vecval, vect1);
        
        vect2 = llenarVector(mat2, filas, colve, cont, vecval);
        imprimirVector(vecval, vect2);
        
        vect3 = llenarVector(mat3, filas, colve, cont, vecval);
        imprimirVector(vecval, vect3);
        
        vect4 = llenarVector(mat4, filas, colve, cont, vecval);
        imprimirVector(vecval, vect4);
        
        vect5 = llenarVector(mat5, filas, colve, cont, vecval);
        imprimirVector(vecval, vect5);
        
        System.out.println("\n memorias\n ");
        //memorias de los patrones ingresados
        
        memoria1 = memoriaAlpha(vecval, vect1);
        //imprimirMatVect(vect1, memoria1);
        System.out.println("\n");
        memoria2 = memoriaAlpha(vecval, vect2);
        //imprimirMatVect(vect2, memoria2);
        System.out.println("\n");
        memoria3 = memoriaAlpha(vecval, vect3);
        //imprimirMatVect(vect3, memoria3);
        System.out.println("\n");
        memoria4 = memoriaAlpha(vecval, vect4);
        //imprimirMatVect(vect4, memoria4);
        System.out.println("\n");
        memoria5 = memoriaAlpha(vecval, vect5);
        //imprimirMatVect(vect5, memoria5);
        
        System.out.println("\n matriz maximos ");
        //llenado de matriz de maximos
        matMaximos = matrizMaximos(memoria1, memoria2, vecval);
        matMaximos = matrizMaximos(matMaximos, memoria3, vecval);
        matMaximos = matrizMaximos(matMaximos, memoria4, vecval);
        matMaximos = matrizMaximos(matMaximos, memoria5, vecval);
        
        //imprimirMatVect(vect1, matMaximos);
        
        System.out.println("\n matriz minimos ");
        //llenado de matriz de maximos
        matMinimos = matrizMinimos(memoria1, memoria2, vecval);
        matMinimos = matrizMinimos(matMinimos, memoria3, vecval);
        matMinimos = matrizMinimos(matMinimos, memoria4, vecval);
        matMinimos = matrizMinimos(matMinimos, memoria5, vecval);
        
        JOptionPane.showMessageDialog(null, "Memoria de MAXIMOS y minimos realizada");

    }//GEN-LAST:event_btnCalculoActionPerformed
    
    private int[][] matrizMaximos(int[][] mat1, int[][] mat2, int valvec) {
        int[][] maximos = new int[valvec][valvec];
        //System.out.println("si entra aca o no :" + valvec);
        for (int i = 0; i < valvec; i++) {
            for (int j = 0; j < valvec; j++) {
                if (mat1[i][j] > mat2[i][j]) {
                    maximos[i][j] = mat1[i][j];
                } else {
                    maximos[i][j] = mat2[i][j];
                }
            }
        }
        //System.out.println("termina");
        return maximos;
    }

    private int[][] matrizMinimos(int[][] mat1, int[][] mat2, int valvec) {
        int[][] minimos = new int[valvec][valvec];
        //System.out.println("si entra aca o no :" + valvec);
        for (int i = 0; i < valvec; i++) {
            for (int j = 0; j < valvec; j++) {
                if (mat1[i][j] > mat2[i][j]) {
                    minimos[i][j] = mat2[i][j];
                } else {
                    minimos[i][j] = mat1[i][j];
                }
            }
        }
        //System.out.println("termina");
        return minimos;
    }
    
    private void imprimirMatVect(int[] vec, int[][] matvec) {
        //System.out.println("\n multiplicacion del vector\n");
        for (int i = 0; i < vec.length; i++) {
            for (int j = 0; j < vec.length; j++) {
                System.out.print(" " + matvec[i][j] + " ");
            }
            System.out.println();
        }
    }
    
    private int[][] memoriaAlpha(int canvec, int[] vec) {
        int[][] matvec = new int[canvec][canvec];
        for (int i = 0; i < canvec; i++) {
            for (int j = 0; j < canvec; j++) {
                if (vec[i] == 0 && vec[j] == 0) {
                    matvec[i][j] = 1;
                } else if (vec[i] == 0 && vec[j] == 1) {
                    matvec[i][j] = 0;
                } else if (vec[i] == 1 && vec[j] == 0) {
                    matvec[i][j] = 2;
                } else if (vec[i] == 1 && vec[j] == 1) {
                    matvec[i][j] = 1;
                }
            }
        }
        return matvec;
    }
    
    private void imprimirVector(int valvec, int[] vec1) {
        System.out.println("\n vectores \n");
        for (int i = 0; i < valvec; i++) {
            System.out.print(vec1[i]);
        }
    }
    
    private int[] llenarVector(int[][] matriz, int x, int y, int cont, int valvec) {
        int[] vec1 = new int[valvec];
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                vec1[cont] = matriz[i][j];
                cont++;
            }
        }
        return vec1;
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
               
                    lbs1[i][j].setBackground(Color.white);
                    lbs1[i][j].setName("0");
                    
                    lbs2[i][j].setBackground(Color.white);
                    lbs2[i][j].setName("0");
                    
                    label[i][j].setBackground(Color.white);
                    label[i][j].setName("0");
            
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnRecuperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecuperarActionPerformed
        // TODO add your handling code here:
        //obtener patrones a recuperar
        System.out.println("\npatrones a recuperar\n");
        int cont=0 ,vecval= filas*colve;
        /*
        recuperarPatrones(lbs2, patron1);
        recuperarPatrones(lbs2, patron2);
        recuperarPatrones(lbs2, patron3);
        recuperarPatrones(lbs2, patron4);
        recuperarPatrones(lbs2, patron5);
        */
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < 5; j++) {                  
                if(j < 5){
                    if(lbs2[i][j].getName().equals("0")){
                        patron1[i][j] = 0;
                    }else{
                        patron1[i][j] = 1;
                    }
                  
                }
                if((j+5) >= 5 && (j+5) < 10){

                    if(lbs2[i][j+5].getName().equals("0")){
                        patron2[i][j] = 0;
                    }else{
                        patron2[i][j] = 1;
                    }
                  
                }
                if((j+10) >= 10 && (j+10) < 15){

                    if(lbs2[i][j+10].getName().equals("0")){
                        patron3[i][j] = 0;
                    }else{
                        patron3[i][j] = 1;
                    }
                  
                }
                if((j+15) >= 15 && (j+15) < 20){

                    if(lbs2[i][j+15].getName().equals("0")){
                        patron4[i][j] = 0;
                    }else{
                        patron4[i][j] = 1;
                    }
                  
                }
                if((j+20) >= 20 && (j+20) < 25){

                    if(lbs2[i][j+20].getName().equals("0")){
                        patron5[i][j] = 0;
                    }else{
                        patron5[i][j] = 1;
                    }
                  
                }
                
            }
            //System.out.println();
        }
        
        p1 = llenarVector(patron1, filas, colve, cont, vecval);
        imprimirVector(vecval, p1);
        
        p2 = llenarVector(patron2, filas, colve, cont, vecval);
        imprimirVector(vecval, p2);
        
        p3 = llenarVector(patron3, filas, colve, cont, vecval);
        imprimirVector(vecval, p3);
        
        p4 = llenarVector(patron4, filas, colve, cont, vecval);
        imprimirVector(vecval, p4);
        
        p5 = llenarVector(patron5, filas, colve, cont, vecval);
        imprimirVector(vecval, p5);
        
        System.out.println("\n");
        vRecuperadoMax1 = recuperarConBeta(vecval, matMaximos, p1);
        //imprimirMatVect(vect1, vRecuperadoMax1);
        System.out.println("\n");
        vRecuperadoMin1 = recuperarConBeta(vecval, matMinimos, p1);
        //imprimirMatVect(vect1, vRecuperadoMin1);
        
        vRecuperadoMax2 = recuperarConBeta(vecval, matMaximos, p2);
        //imprimirMatVect(vect1, vRecuperadoMax2);
        System.out.println("\n");
        vRecuperadoMin2 = recuperarConBeta(vecval, matMinimos, p2);
        //imprimirMatVect(vect1, vRecuperadoMin2);
        
        vRecuperadoMax3 = recuperarConBeta(vecval, matMaximos, p3);
        //imprimirMatVect(vect1, vRecuperadoMax2);
        System.out.println("\n");
        vRecuperadoMin3 = recuperarConBeta(vecval, matMinimos, p3);
        //imprimirMatVect(vect1, vRecuperadoMin2);
        
        vRecuperadoMax4 = recuperarConBeta(vecval, matMaximos, p4);
        //imprimirMatVect(vect1, vRecuperadoMax2);
        System.out.println("\n");
        vRecuperadoMin4 = recuperarConBeta(vecval, matMinimos, p4);
        //imprimirMatVect(vect1, vRecuperadoMin2);
        
        vRecuperadoMax5 = recuperarConBeta(vecval, matMaximos, p5);
        //imprimirMatVect(vect1, vRecuperadoMax2);
        System.out.println("\n");
        vRecuperadoMin5 = recuperarConBeta(vecval, matMinimos, p5);
        //imprimirMatVect(vect1, vRecuperadoMin2);
        JOptionPane.showMessageDialog(null, "Patrones a recuperar capturados");
    }//GEN-LAST:event_btnRecuperarActionPerformed

    private int[] recuperarPatronvect(int[][] vect, int vecval, int contaux) {
        int[] pr = new int[vecval];
        for (int i = 0; i < vecval; i++) {
            pr[i] = vect[contaux][i];
        }

        System.out.println("\n");

        /*for (int i = 0; i < vecval; i++) {
            System.out.print(pr[i]);
        }
*/
        return pr;
    }
    
    private int valorFilaMin(int[] recu, int valvec) {
        int valor = recu[0];
        for (int i = 1; i < valvec; i++) {
            if (recu[i] < valor) {
                valor = recu[i];
            }
        }
        return valor;
    }

    private static int valorFilaMaxi(int[] recu, int valvec) {
        int valor = recu[0];
        for (int i = 1; i < valvec; i++) {
            if (recu[i] > valor) {
                valor = recu[i];
            }
        }
        return valor;
    }
    
    public void patronesRecuperadosMax(int valvec, int [][] recuperacion, int[] recuperado, int [] aux){
        int valor;
        for (int i = 0; i < valvec; i++) {
            /*busca el valor de acuerdo al valor mayor*/
            recuperado = recuperarPatronvect(recuperacion, valvec, i);
            valor = valorFilaMaxi(recuperado, valvec);
            System.out.println("\n valor recuperado: " + valor);
            aux[i] = valor;

        }
        
        System.out.println("\ncomprobacion del valor maximo");

        for (int i = 0; i < valvec; i++) {
            System.out.print(aux[i]);
        }
    }
    
    public void patronesRecuperadosMin(int valvec, int [][] recuperacion, int[] recuperado, int [] aux){
        int valor;
        for (int i = 0; i < valvec; i++) {
            /*buscar el valor de acuerdo al valor minimo*/
            recuperado = recuperarPatronvect(recuperacion, valvec, i);
            valor = valorFilaMin(recuperado, valvec);
            System.out.println("\n valor recuperado: " + valor);
            aux[i] = valor;

        }
        
        System.out.println("\ncomprobacion del valor minimo");

        for (int i = 0; i < valvec; i++) {
            System.out.print(aux[i]);
        }
       
    }
    
    private void btnaditivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaditivoActionPerformed
        // TODO add your handling code here:
        
        int valvec = filas*colve;
               
        patronesRecuperadosMin(valvec, vRecuperadoMax1, pRecuperado1,auxmin1);
        patronesRecuperadosMin(valvec, vRecuperadoMax2, pRecuperado2,auxmin2);
        patronesRecuperadosMin(valvec, vRecuperadoMax3, pRecuperado2,auxmin3);
        patronesRecuperadosMin(valvec, vRecuperadoMax4, pRecuperado2,auxmin4);
        patronesRecuperadosMin(valvec, vRecuperadoMax5, pRecuperado2,auxmin5);
        int contaux=0;
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < colve; j++) { 
                
                
                if(j < 5){
                    if(auxmin1[contaux] ==  1){
                        label[i][j].setBackground(Color.black);
                    }else{
                        label[i][j].setBackground(Color.white);
                    }
                   
                  
                }
                if((j+5) >= 5 && (j+5) < 10){

                    if(auxmin2[contaux] ==  1){
                        label[i][j+5].setBackground(Color.black);
                    }else{
                        label[i][j+5].setBackground(Color.white);
                    }
                  
                }
                if((j+10) >= 10 && (j+10) < 15){

                    if(auxmin3[contaux] ==  1){
                        label[i][j+10].setBackground(Color.black);
                    }else{
                        label[i][j+10].setBackground(Color.white);
                    }
                  
                }
                if((j+15) >= 15 && (j+15) < 20){

                    if(auxmin4[contaux] ==  1){
                        label[i][j+15].setBackground(Color.black);
                    }else{
                        label[i][j+15].setBackground(Color.white);
                    }
                  
                }
                if((j+20) >= 20 && (j+20) < 25){

                    if(auxmin5[contaux] ==  1){
                        label[i][j+20].setBackground(Color.black);
                    }else{
                        label[i][j+20].setBackground(Color.white);
                    }
                  
                }
                 
                contaux++;
            }
            //System.out.println();
        }
        
    }//GEN-LAST:event_btnaditivoActionPerformed

    private void btnsustrativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsustrativoActionPerformed
        // TODO add your handling code here:
        int valvec = filas*colve;
        patronesRecuperadosMax(valvec, vRecuperadoMin1, pRecuperado1,auxmax1);
        patronesRecuperadosMax(valvec, vRecuperadoMin2, pRecuperado2,auxmax2);
        patronesRecuperadosMax(valvec, vRecuperadoMin3, pRecuperado3,auxmax3);
        patronesRecuperadosMax(valvec, vRecuperadoMin4, pRecuperado4,auxmax4);
        patronesRecuperadosMax(valvec, vRecuperadoMin5, pRecuperado5,auxmax5);
        
        int contaux=0;
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < colve; j++) { 
                
                
                if(j < 5){
                    if(auxmax1[contaux] ==  1){
                        label[i][j].setBackground(Color.black);
                    }else{
                        label[i][j].setBackground(Color.white);
                    }
                   
                  
                }
                if((j+5) >= 5 && (j+5) < 10){

                    if(auxmax2[contaux] ==  1){
                        label[i][j+5].setBackground(Color.black);
                    }else{
                        label[i][j+5].setBackground(Color.white);
                    }
                  
                }
                if((j+10) >= 10 && (j+10) < 15){

                    if(auxmax3[contaux] ==  1){
                        label[i][j+10].setBackground(Color.black);
                    }else{
                        label[i][j+10].setBackground(Color.white);
                    }
                  
                }
                if((j+15) >= 15 && (j+15) < 20){

                    if(auxmax4[contaux] ==  1){
                        label[i][j+15].setBackground(Color.black);
                    }else{
                        label[i][j+15].setBackground(Color.white);
                    }
                  
                }
                if((j+20) >= 20 && (j+20) < 25){

                    if(auxmax5[contaux] ==  1){
                        label[i][j+20].setBackground(Color.black);
                    }else{
                        label[i][j+20].setBackground(Color.white);
                    }
                  
                }
                 
                contaux++;
            }
            //System.out.println();
        }
    }//GEN-LAST:event_btnsustrativoActionPerformed
  
    private int[][] recuperarConBeta(int valcan, int[][] maximos, int patron[]) {
        int[][] recuperado = new int[valcan][valcan];
        int cont = 0;
        for (int i = 0; i < valcan; i++) {
            for (int j = 0; j < valcan; j++) {
                if (maximos[i][j] == 0 && patron[cont] == 0) {
                    recuperado[i][j] = 0;
                    cont++;
                } else if (maximos[i][j] == 0 && patron[cont] == 1) {
                    recuperado[i][j] = 0;
                    cont++;
                } else if (maximos[i][j] == 1 && patron[cont] == 0) {
                    recuperado[i][j] = 0;
                    cont++;
                } else if (maximos[i][j] == 1 && patron[cont] == 1) {
                    recuperado[i][j] = 1;
                    cont++;
                } else if (maximos[i][j] == 2 && patron[cont] == 0) {
                    recuperado[i][j] = 1;
                    cont++;
                } else if (maximos[i][j] == 2 && patron[cont] == 1) {
                    recuperado[i][j] = 1;
                    cont++;
                }

            }
            cont = 0;
        }

        return recuperado;

    }
    
    public class ActionButton implements ActionListener, MouseListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            for (int i = 0; i < filas; i++) {
                for (int j = 0; j < columnas; j++) {
                    if (e.getSource().equals(lbs1[i][j])) {
                        //System.out.println("pintando botones");
                        lbs1[i][j].setBackground(Color.black);
                        lbs1[i][j].setName("1");
                    }
                }
            }
            //System.out.println("se ha pintado");
        }

        @Override
        public void mouseClicked(MouseEvent e) {

        }

        @Override
        public void mousePressed(MouseEvent e) {
            if (SwingUtilities.isRightMouseButton(e)) {
                for (int i = 0; i < filas; i++) {
                    for (int j = 0; j < columnas; j++) {
                        if (e.getSource().equals(lbs1[i][j])) {
                            //System.out.println("pintando botones");
                            lbs1[i][j].setBackground(Color.white);
                            lbs1[i][j].setName("0");
                        }
                    }
                }
            }

        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }
    
    public class ActionButton2 implements ActionListener, MouseListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            for (int i = 0; i < filas; i++) {
                for (int j = 0; j < columnas; j++) {
                    if (e.getSource().equals(lbs2[i][j])) {
                        //System.out.println("pintando botones");
                        lbs2[i][j].setBackground(Color.black);
                        lbs2[i][j].setName("1");
                    }
                }
            }
            //System.out.println("se ha pintado");
        }

        @Override
        public void mouseClicked(MouseEvent e) {

        }

        @Override
        public void mousePressed(MouseEvent e) {
            if (SwingUtilities.isRightMouseButton(e)) {
                for (int i = 0; i < filas; i++) {
                    for (int j = 0; j < columnas; j++) {
                        if (e.getSource().equals(lbs2[i][j])) {
                            //System.out.println("pintando botones");
                            lbs2[i][j].setBackground(Color.white);
                            lbs2[i][j].setName("0");
                        }
                    }
                }
            }

        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }

    public JButton[][] setMatrices1() {
        
        int corx = 10;
        int cory = 10;
        int espacio = 0;
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                lbs1[i][j] = new JButton();
                lbs1[i][j].setBackground(Color.WHITE);
                lbs1[i][j].setBounds(corx, cory, 20, 20);
                lbs1[i][j].setName("0");

                ActionButton ab = new ActionButton();

                lbs1[i][j].addActionListener(ab);
                lbs1[i][j].addMouseListener(ab);
                jp1.add(lbs1[i][j]);
                //jp2.add(lbs[i][j]);
                corx += 26;
                espacio++;
                if (espacio == 5) {
                    corx += 15;
                    espacio = 0;
                }
            }
            corx = 10;
            cory += 25;

        }
        return lbs1;
    }
    
    public JButton[][] setMatrices2() {
        
        int corx = 10;
        int cory = 10;
        int espacio = 0;
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                lbs2[i][j] = new JButton();
                lbs2[i][j].setBackground(Color.WHITE);
                lbs2[i][j].setBounds(corx, cory, 20, 20);
                lbs2[i][j].setName("0");

                ActionButton2 ab = new ActionButton2();

                lbs2[i][j].addActionListener(ab);
                lbs2[i][j].addMouseListener(ab);
                //jp1.add(lbs[i][j]);
                jp2.add(lbs2[i][j]);
                corx += 26;
                espacio++;
                if (espacio == 5) {
                    corx += 15;
                    espacio = 0;
                }
            }
            corx = 10;
            cory += 25;

        }
        return lbs2;
    }
    
    public JButton[][] setMatricesResul() {
        
        int corx = 10;
        int cory = 10;
        int espacio = 0;
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                label[i][j] = new JButton();
                label[i][j].setBackground(Color.white);
                label[i][j].setBounds(corx, cory, 20, 20);
                /*ActionButton2 ab = new ActionButton2();

                label[i][j].addActionListener(ab);
                label[i][j].addMouseListener(ab);
                //jp1.add(lbs[i][j]);*/
                jp3.add(label[i][j]);
                corx += 26;
                espacio++;
                if (espacio == 5) {
                    corx += 15;
                    espacio = 0;
                }
            }
            corx = 10;
            cory += 25;

        }
        return label;
    }
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculo;
    private javax.swing.JButton btnRecuperar;
    private javax.swing.JButton btnaditivo;
    private javax.swing.JButton btnsustrativo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jp1;
    private javax.swing.JPanel jp2;
    private javax.swing.JPanel jp3;
    // End of variables declaration//GEN-END:variables
}
